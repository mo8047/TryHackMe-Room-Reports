##Section 1

Terminal Text Editors

This task introduces us to nano and Vim in Linux

Nano 
To create a nano file in Linux, we type 'nano filename' and it'll open the editor where you can modify the contents or text.
Some of the nano features include

Searching for text
Copying and Pasting
Jumping to a line number
Finding out what line number you are on

Vim
Vim is a much more advanced editor.
Some of Vim's benefits are
Customisability - you can modify the keyboard shortcuts to be of your choosing
Syntax Highlighting - this is useful if you are writing or maintaining code, making it a popular choice for software developers
VIM works on all terminals where nano may not be installed
An abundance of documentation is available for it.

##Section 2

General Useful Utilities

File Transfers in Linux

wget – Downloads files via HTTP/HTTPS from a given URL.
Example: wget https://example.com/file.txt

scp – Securely copies files between local and remote systems over SSH.

Local → Remote: scp local.txt user@ip:/path/remote.txt

Remote → Local: scp user@ip:/path/remote.txt local.txt

Python HTTP Server – Serves files from a directory over HTTP.
Start server: python3 -m http.server 8000
Download from another machine: wget http://IP:8000/filename

##Section 3

Processes 101
Processes are the programs that are running on your machine. They are managed by the kernel, where each process will have an ID associated with it, also known as its PID.
The PID increments for the order in which the process starts.

Viewing Processes

We can use the 'ps' command to provide a list of the running processes

To see the processes run by other users and those that don't run from a session (i.e. system processes), we need to provide aux to the ps command like so: ps aux

 the top command; top gives you real-time statistics about the processes running on your system instead of a one-time view. 

Managing Processes

To kill a command, we can use the 'kill' command and the associated PID that we wish to kill. e.g., to kill PID 1337, we'd use kill 1337.

some of the signals that we can send to a process when it is killed:

SIGTERM - Kill the process, but allow it to do some cleanup tasks beforehand
SIGKILL - Kill the process - doesn't do any cleanup after the fact
SIGSTOP - Stop/suspend a process

 Getting Processes/Services to Start on Boot

We can do four options with systemctl:

Enter the use of systemctl -- this command allows us to interact with the systemd process/daemon. Continuing on with our example, systemctl is an easy to use command 
that takes the following formatting: systemctl [option] [service]

Start
Stop
Enable
Disable

An Introduction to Backgrounding and Foregrounding in Linux

Processes can run in two states: In the background and in the foreground.

Foregrounding a process

The fg command is used to bring the background process back into the foreground on the terminal, where the script's output is now returned to us.

##Section 4

Maintaining Your System: Automation

If  you want to schedule a command to run at boot or a specific time. We use the 'cron' feature in Linux.

We interact with cron via crontab. Crontab is started during boot and is responsible for facilitating and running the cron commands.

Essentially a crontab is a file with formatting recognised by cron to execute the process step by step

There are 6 special crontab values.

Value	Description
MIN	 What minute to execute at
HOUR	What hour to execute at
DOM	What day of the month to execute at
MON	What month of the year to execute at
DOW	What day of the week to execute at
CMD	The actual command that will be executed.

Crontabs can be edited by using crontab -e, where you can select an editor (such as Nano) to edit your crontab.

##Section 5


