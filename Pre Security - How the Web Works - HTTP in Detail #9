##Section 1 

What is HTTPS

HTTP is what is used when you enter a website. It was developed by Tim Berners Lee and his team.
HTTP is the set of rules used for communicating with web servers and the transmission of webpage data.

HTTPS is the secure version of HTTP where the S stands for Secure and it encrypts all the data you recieve and send.

##Section 2 

Requests and Responses

A URL(Uniform Resource Letter) is an instruction on how to access the internet, A URL consists of
Scheme: This instructs on what protocol to use for accessing the resource such as HTTP, HTTPS, FTP (File Transfer Protocol).

User: Some services require authentication to log in, you can put a username and password into the URL to log in.

Host: The domain name or IP address of the server you wish to access.

Port: The Port that you are going to connect to, usually 80 for HTTP and 443 for HTTPS, but this can be hosted on any port between 1 - 65535.

Path: The file name or location of the resource you are trying to access.

Query String: Extra bits of information that can be sent to the requested path. For example, /blog?id=1 would tell the blog path that you wish to receive 
the blog article with the id of 1.

Fragment: This is a reference to a location on the actual page requested. This is commonly used for pages with long content and can have a certain part of 
the page directly linked to it, so it is viewable to the user as soon as they access the page.

To make a web reuest we use the GET / HTTP/1.1 request with the needed URL.

For example
GET / HTTP/1.1

Host: tryhackme.com
User-Agent: Mozilla/5.0 Firefox/87.0
Referer: https://tryhackme.com/

Where the host is the website DNS user agent is the browser and it's edition (87) abd the refer is the URL

##Section 3

HTTP Methods

GET: The GET method retrieves the data
POST: The POST method is used to add data and create records
PUT: The Put method is used ofr suubmitting data and updating information
DELETE: This is used for deleting information/records from a website

##Section 4 

HTTP Status code

The HTTP status code is to tell the uswer the issue they are facing and it is divided into 5 different sections.
100-199 - Information Response	These are sent to tell the client the first part of their request has been accepted and they should continue sending the rest of their request.
These codes are no longer very common.
200-299 - Success	This range of status codes is used to tell the client their request was successful.
300-399 - Redirection	These are used to redirect the client's request to another resource. This can be either to a different webpage or a different website altogether.
400-499 - Client Errors	Used to inform the client that there was an error with their request.
500-599 - Server Errors	This is reserved for errors happening on the server-side and usually indicate quite a major problem with the server handling the request.

Some of the most common HTTP status codes are
200 - OK	The request was completed successfully.
201 - Created	A resource has been created (for example a new user or new blog post).
301 - Moved Permanently	This redirects the client's browser to a new webpage or tells search engines that the page has moved somewhere else and to look there instead.
302 - Found	Similar to the above permanent redirect, but as the name suggests, this is only a temporary change and it may change again in the near future.
400 - Bad Request	This tells the browser that something was either wrong or missing in their request. This could sometimes be used if the web server resource that is being 
requested expected a certain parameter that the client didn't send.
401 - Not Authorised	You are not currently allowed to view this resource until you have authorised with the web application, most commonly with a username and password.
403 - Forbidden	You do not have permission to view this resource whether you are logged in or not.
405 - Method Not Allowed	The resource does not allow this method request, for example, you send a GET request to the resource /create-account when it was expecting a POST 
request instead.
404 - Page Not Found	The page/resource you requested does not exist.
500 - Internal Service Error	The server has encountered some kind of error with your request that it doesn't know how to handle properly.
503 - Service Unavailable	
This server cannot handle your request as it's either overloaded or down for maintenance.

##Section 5

Headers

Common Request Header
These are headers that are sent from the client (usually your browser) to the server.

Host: Some web servers host multiple websites so by providing the host headers you can tell it which one you require, otherwise you'll just receive the default website 
for the server.

User-Agent: This is your browser software and version number, telling the web server your browser software helps it format the website properly for your browser and also 
some elements of HTML, JavaScript and CSS are only available in certain browsers.

Content-Length: When sending data to a web server such as in a form, the content length tells the web server how much data to expect in the web request. This way the server
can ensure it isn't missing any data.

Accept-Encoding: Tells the web server what types of compression methods the browser supports so the data can be made smaller for transmitting over the internet.


Cookie: Data sent to the server to help remember your information.
Common Response Headers

These are the headers that are returned to the client from the server after a request.

Set-Cookie: Information to store which gets sent back to the web server on each request .

Cache-Control: How long to store the content of the response in the browser's cache before it requests it again.

Content-Type: This tells the client what type of data is being returned, i.e., HTML, CSS, JavaScript, Images, PDF, Video, etc. Using the content-type 
header the browser then knows how to process the data.

Content-Encoding: What method has been used to compress the data to make it smaller when sending it over the internet.

##Section 6

Cookies

Cookies are small pieces of data stored at the computer through a Set-Cookie command that HTTP requests, HTTP doesn't store the Set-Cookie data sonce it's stateless.

##Section 7

Practical - Making Reuqests

In this practical we solved a website using different requests and adjusting the parameters respectfully.
We used requests like the Get, Post, Put, Delete for different tasks like adding the username and passwords to the parameters to enter a website,
Making a delete request to a specific webpage, Making a Get request to  a specific webpage.
